/*
'===============================================================================
' Generated by GenerateDataAndObjectLayer Version 1.0.0.0
'
' <auto-generated>
'     This code was generated by a tool.
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated. 
' </auto-generated>
'===============================================================================

*/
USE [RheemUsers]

/* ------------------------------------------------------------
   Get rid of obsolete InsertNews
   Get rid of obsolete UpdateNews
   Get rid of obsolete DeleteNews
   Get rid of obsolete SearchNewsByString
   Get rid of obsolete GetNewsByID
   ------------------------------------------------------------ */
If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('InsertNews') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE InsertNews;
        PRINT 'Dropped InsertNews'
    END
GO

If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('UpdateNews') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE UpdateNews;
        PRINT 'Dropped UpdateNews'
    END
GO

If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('DeleteNews') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE DeleteNews;
        PRINT 'Dropped DeleteNews'
    END
GO

If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('SearchNewsByString') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE SearchNewsByString;
        PRINT 'Dropped SearchNewsByString'
    END
GO

If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('GetNewsByID') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE GetNewsByID;
        PRINT 'Dropped GetNewsByID'
    END
GO

If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('spGen__News_GetByID') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE spGen__News_GetByID;
        PRINT 'Dropped spGen__News_GetByID'
    END
GO

/* ------------------------------------------------------------
   PROCEDURE:    spGen__News_GetByID

   Description:  Selects record(s) from table 'News'

   Generated by GenerateDataAndObjectLayer Version 1.0.0.0
   ------------------------------------------------------------ */

CREATE PROCEDURE dbo.spGen__News_GetByID
(
    @NewsID uniqueidentifier

)

AS
BEGIN
    SET NOCOUNT ON
    SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

    DECLARE @Err Int

    Select [NewsID],[Author],[PublicationDate],[ModificationDate],[Location],[IsLive],[NewsType],[NewsHeadline],[NewsContent],[PreviewHeadline],[PreviewContent],[AuthorPersonID],[CreateDateTime__Gen],[UpdateDateTime__Gen]
    FROM [News]
    WHERE [NewsID] = @NewsID

End
GO

-- Display the status of Proc creation
If @@Error = 0 PRINT 'Procedure Creation: spGen__News_GetByID Succeeded'
Else PRINT 'Procedure Creation: spGen__News_GetByID Error on Creation'
GO




If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('spGen__News_SearchByString') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE spGen__News_SearchByString;
        PRINT 'Dropped spGen__News_SearchByString'
    END
GO

/* ------------------------------------------------------------
   PROCEDURE:    spGen__News_SearchByString

   Description:  Selects a record from table 'News'
                 And puts values into parameters

   Generated by GenerateDataAndObjectLayer Version 1.0.0.0
   ------------------------------------------------------------ */

CREATE PROCEDURE dbo.spGen__News_SearchByString
(
    @searchParam varchar(4000)
)

AS
BEGIN
    SET NOCOUNT ON
    SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

    DECLARE @Err Int
    DECLARE @strSql varchar(4000)

    SET @strSql = ' Select [NewsID],[Author],[PublicationDate],[ModificationDate],[Location],[IsLive],[NewsType],[NewsHeadline],[NewsContent],[PreviewHeadline],[PreviewContent],[AuthorPersonID],[CreateDateTime__Gen],[UpdateDateTime__Gen]
    FROM [News]
    WHERE ' +  @searchParam

    EXEC(@strSql)

    --//We should NOT be using exec above.
    --//If params are NOT known, then be sure to clean sql
    --//If params are known, format like example below

    --IF @prodname IS NOT NULL
    --SELECT @sql = @sql + ' ProductName LIKE @prodname'
    --EXEC sp_executesql @sql, N'@prodname varchar(400)',@prodname

End
GO

-- Display the status of Proc creation
If @@Error = 0 PRINT 'Procedure Creation: spGen__News_SearchByString Succeeded'
Else PRINT 'Procedure Creation: spGen__News_SearchByString Error on Creation'
GO




If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('spGen__News_Delete') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE spGen__News_Delete;
        PRINT 'Dropped spGen__News_Delete'
    END
GO

/* ------------------------------------------------------------
   PROCEDURE:    spGen__News_Delete

   Description:  Deletes a record from table 'News'

   Generated by GenerateDataAndObjectLayer Version 1.0.0.0
   ------------------------------------------------------------ */

CREATE PROCEDURE dbo.spGen__News_Delete
(
    @NewsID uniqueidentifier

)
AS
SET NOCOUNT ON
SET XACT_ABORT ON

BEGIN
    DECLARE @Err Int


    DELETE FROM [News]
    WHERE [NewsID] = @NewsID


End
GO

-- Display the status of Proc creation
If @@Error = 0 PRINT 'Procedure Creation: spGen__News_Delete Succeeded'
Else PRINT 'Procedure Creation: spGen__News_Delete Error on Creation'
GO




If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('spGen__News_Save') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE spGen__News_Save;
        PRINT 'Dropped spGen__News_Save'
    END
GO

/* ------------------------------------------------------------
   PROCEDURE:    spGen__News_Save

   Description:  Updates or Deletes a record In table 'News'

   Generated by GenerateDataAndObjectLayer Version 1.0.0.0
   ------------------------------------------------------------ */

CREATE PROCEDURE dbo.spGen__News_Save
(
    @ErrText varchar(4000) output,
    @NewsID uniqueidentifier output,
    @Author varchar(50),
    @PublicationDate datetime,
    @ModificationDate datetime,
    @Location varchar(50),
    @IsLive bit,
    @NewsType varchar(50),
    @NewsHeadline varchar(500),
    @NewsContent text,
    @PreviewHeadline varchar(500),
    @PreviewContent text,
    @AuthorPersonID uniqueidentifier
)

AS
SET NOCOUNT ON
SET XACT_ABORT ON

BEGIN

    DECLARE @UniqueRowCount Int
    IF @NewsID = '00000000-0000-0000-0000-000000000000' SET @NewsID = NULL
    IF @NewsID IS NULL
        BEGIN
            SET @UniqueRowCount = 0       -- No unique indexes exist for this table
            IF @UniqueRowCount > 0
                BEGIN
                    SET @ErrText = ''    -- No unique indexes exist for this table
                END
            ELSE
                BEGIN
                    SET @NewsID = NewID()

                    INSERT
                    INTO [News]
                    (
                        [NewsID],
                        [Author],
                        [PublicationDate],
                        [ModificationDate],
                        [Location],
                        [IsLive],
                        [NewsType],
                        [NewsHeadline],
                        [NewsContent],
                        [PreviewHeadline],
                        [PreviewContent],
                        [AuthorPersonID],
                        [CreateDateTime__Gen],
                        [UpdateDateTime__Gen]
                    )
                    VALUES
                    (
                        @NewsID,
                        @Author,
                        @PublicationDate,
                        @ModificationDate,
                        @Location,
                        @IsLive,
                        @NewsType,
                        @NewsHeadline,
                        @NewsContent,
                        @PreviewHeadline,
                        @PreviewContent,
                        @AuthorPersonID,
                        SYSDATETIME(),
                        SYSDATETIME()
                    )
                END
        END
    ELSE
        BEGIN
            SET @UniqueRowCount = 0       -- No unique indexes exist for this table
            IF @UniqueRowCount > 0
                BEGIN
                    SET @ErrText = ''    -- No unique indexes exist for this table
                END
            ELSE
                BEGIN
                    UPDATE [News]
                    SET
                    [Author] = @Author,
                    [PublicationDate] = @PublicationDate,
                    [ModificationDate] = @ModificationDate,
                    [Location] = @Location,
                    [IsLive] = @IsLive,
                    [NewsType] = @NewsType,
                    [NewsHeadline] = @NewsHeadline,
                    [NewsContent] = @NewsContent,
                    [PreviewHeadline] = @PreviewHeadline,
                    [PreviewContent] = @PreviewContent,
                    [AuthorPersonID] = @AuthorPersonID,
                    [UpdateDateTime__Gen] = SYSDATETIME()
                    WHERE [NewsID] = @NewsID
                END
        END

End
GO

-- Display the status of Proc creation
If @@Error = 0 PRINT 'Procedure Creation: spGen__News_Save Succeeded'
Else PRINT 'Procedure Creation: spGen__News_Save Error on Creation'
GO




