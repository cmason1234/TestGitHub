/*
'===============================================================================
' Generated by GenerateDataAndObjectLayer Version 1.0.0.0
'
' <auto-generated>
'     This code was generated by a tool.
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated. 
' </auto-generated>
'===============================================================================

*/
USE [RheemUsers]

/* ------------------------------------------------------------
   Get rid of obsolete InsertAddress
   Get rid of obsolete UpdateAddress
   Get rid of obsolete DeleteAddress
   Get rid of obsolete SearchAddressByString
   Get rid of obsolete GetAddressByID
   ------------------------------------------------------------ */
If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('InsertAddress') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE InsertAddress;
        PRINT 'Dropped InsertAddress'
    END
GO

If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('UpdateAddress') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE UpdateAddress;
        PRINT 'Dropped UpdateAddress'
    END
GO

If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('DeleteAddress') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE DeleteAddress;
        PRINT 'Dropped DeleteAddress'
    END
GO

If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('SearchAddressByString') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE SearchAddressByString;
        PRINT 'Dropped SearchAddressByString'
    END
GO

If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('GetAddressByID') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE GetAddressByID;
        PRINT 'Dropped GetAddressByID'
    END
GO

If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('spGen__Address_GetByID') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE spGen__Address_GetByID;
        PRINT 'Dropped spGen__Address_GetByID'
    END
GO

/* ------------------------------------------------------------
   PROCEDURE:    spGen__Address_GetByID

   Description:  Selects record(s) from table 'Address'

   Generated by GenerateDataAndObjectLayer Version 1.0.0.0
   ------------------------------------------------------------ */

CREATE PROCEDURE dbo.spGen__Address_GetByID
(
    @AddressID uniqueidentifier

)

AS
BEGIN
    SET NOCOUNT ON
    SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

    DECLARE @Err Int

    Select [AddressID],[AddressLine1],[AddressLine2],[City],[State],[PostalCode],[Country],[AddressType],[Lat],[Long],[LocationType],[CreateDateTime__Gen],[UpdateDateTime__Gen]
    FROM [Address]
    WHERE [AddressID] = @AddressID

End
GO

-- Display the status of Proc creation
If @@Error = 0 PRINT 'Procedure Creation: spGen__Address_GetByID Succeeded'
Else PRINT 'Procedure Creation: spGen__Address_GetByID Error on Creation'
GO




If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('spGen__Address_SearchByString') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE spGen__Address_SearchByString;
        PRINT 'Dropped spGen__Address_SearchByString'
    END
GO

/* ------------------------------------------------------------
   PROCEDURE:    spGen__Address_SearchByString

   Description:  Selects a record from table 'Address'
                 And puts values into parameters

   Generated by GenerateDataAndObjectLayer Version 1.0.0.0
   ------------------------------------------------------------ */

CREATE PROCEDURE dbo.spGen__Address_SearchByString
(
    @searchParam varchar(4000)
)

AS
BEGIN
    SET NOCOUNT ON
    SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

    DECLARE @Err Int
    DECLARE @strSql varchar(4000)

    SET @strSql = ' Select [AddressID],[AddressLine1],[AddressLine2],[City],[State],[PostalCode],[Country],[AddressType],[Lat],[Long],[LocationType],[CreateDateTime__Gen],[UpdateDateTime__Gen]
    FROM [Address]
    WHERE ' +  @searchParam

    EXEC(@strSql)

    --//We should NOT be using exec above.
    --//If params are NOT known, then be sure to clean sql
    --//If params are known, format like example below

    --IF @prodname IS NOT NULL
    --SELECT @sql = @sql + ' ProductName LIKE @prodname'
    --EXEC sp_executesql @sql, N'@prodname varchar(400)',@prodname

End
GO

-- Display the status of Proc creation
If @@Error = 0 PRINT 'Procedure Creation: spGen__Address_SearchByString Succeeded'
Else PRINT 'Procedure Creation: spGen__Address_SearchByString Error on Creation'
GO




If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('spGen__Address_Delete') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE spGen__Address_Delete;
        PRINT 'Dropped spGen__Address_Delete'
    END
GO

/* ------------------------------------------------------------
   PROCEDURE:    spGen__Address_Delete

   Description:  Deletes a record from table 'Address'

   Generated by GenerateDataAndObjectLayer Version 1.0.0.0
   ------------------------------------------------------------ */

CREATE PROCEDURE dbo.spGen__Address_Delete
(
    @AddressID uniqueidentifier

)
AS
SET NOCOUNT ON
SET XACT_ABORT ON

BEGIN
    DECLARE @Err Int


    DELETE FROM [Address]
    WHERE [AddressID] = @AddressID


End
GO

-- Display the status of Proc creation
If @@Error = 0 PRINT 'Procedure Creation: spGen__Address_Delete Succeeded'
Else PRINT 'Procedure Creation: spGen__Address_Delete Error on Creation'
GO




If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('spGen__Address_Save') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE spGen__Address_Save;
        PRINT 'Dropped spGen__Address_Save'
    END
GO

/* ------------------------------------------------------------
   PROCEDURE:    spGen__Address_Save

   Description:  Updates or Deletes a record In table 'Address'

   Generated by GenerateDataAndObjectLayer Version 1.0.0.0
   ------------------------------------------------------------ */

CREATE PROCEDURE dbo.spGen__Address_Save
(
    @ErrText varchar(4000) output,
    @AddressID uniqueidentifier output,
    @AddressLine1 varchar(50),
    @AddressLine2 varchar(50),
    @City varchar(50),
    @State char(3),
    @PostalCode varchar(50),
    @Country varchar(50),
    @AddressType varchar(50),
    @Lat float,
    @Long float,
    @LocationType varchar(50)
)

AS
SET NOCOUNT ON
SET XACT_ABORT ON

BEGIN

    DECLARE @UniqueRowCount Int
    IF @AddressID = '00000000-0000-0000-0000-000000000000' SET @AddressID = NULL
    IF @AddressID IS NULL
        BEGIN
            SET @UniqueRowCount = 0       -- No unique indexes exist for this table
            IF @UniqueRowCount > 0
                BEGIN
                    SET @ErrText = ''    -- No unique indexes exist for this table
                END
            ELSE
                BEGIN
                    SET @AddressID = NewID()

                    INSERT
                    INTO [Address]
                    (
                        [AddressID],
                        [AddressLine1],
                        [AddressLine2],
                        [City],
                        [State],
                        [PostalCode],
                        [Country],
                        [AddressType],
                        [Lat],
                        [Long],
                        [LocationType],
                        [CreateDateTime__Gen],
                        [UpdateDateTime__Gen]
                    )
                    VALUES
                    (
                        @AddressID,
                        @AddressLine1,
                        @AddressLine2,
                        @City,
                        @State,
                        @PostalCode,
                        @Country,
                        @AddressType,
                        @Lat,
                        @Long,
                        @LocationType,
                        SYSDATETIME(),
                        SYSDATETIME()
                    )
                END
        END
    ELSE
        BEGIN
            SET @UniqueRowCount = 0       -- No unique indexes exist for this table
            IF @UniqueRowCount > 0
                BEGIN
                    SET @ErrText = ''    -- No unique indexes exist for this table
                END
            ELSE
                BEGIN
                    UPDATE [Address]
                    SET
                    [AddressLine1] = @AddressLine1,
                    [AddressLine2] = @AddressLine2,
                    [City] = @City,
                    [State] = @State,
                    [PostalCode] = @PostalCode,
                    [Country] = @Country,
                    [AddressType] = @AddressType,
                    [Lat] = @Lat,
                    [Long] = @Long,
                    [LocationType] = @LocationType,
                    [UpdateDateTime__Gen] = SYSDATETIME()
                    WHERE [AddressID] = @AddressID
                END
        END

End
GO

-- Display the status of Proc creation
If @@Error = 0 PRINT 'Procedure Creation: spGen__Address_Save Succeeded'
Else PRINT 'Procedure Creation: spGen__Address_Save Error on Creation'
GO




