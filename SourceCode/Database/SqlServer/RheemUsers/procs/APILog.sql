/*
'===============================================================================
' Generated by GenerateDataAndObjectLayer Version 1.0.0.0
'
' <auto-generated>
'     This code was generated by a tool.
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated. 
' </auto-generated>
'===============================================================================

*/
USE [RheemUsers]

/* ------------------------------------------------------------
   Get rid of obsolete InsertAPILog
   Get rid of obsolete UpdateAPILog
   Get rid of obsolete DeleteAPILog
   Get rid of obsolete SearchAPILogByString
   Get rid of obsolete GetAPILogByID
   ------------------------------------------------------------ */
If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('InsertAPILog') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE InsertAPILog;
        PRINT 'Dropped InsertAPILog'
    END
GO

If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('UpdateAPILog') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE UpdateAPILog;
        PRINT 'Dropped UpdateAPILog'
    END
GO

If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('DeleteAPILog') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE DeleteAPILog;
        PRINT 'Dropped DeleteAPILog'
    END
GO

If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('SearchAPILogByString') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE SearchAPILogByString;
        PRINT 'Dropped SearchAPILogByString'
    END
GO

If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('GetAPILogByID') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE GetAPILogByID;
        PRINT 'Dropped GetAPILogByID'
    END
GO

If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('spGen__APILog_GetByID') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE spGen__APILog_GetByID;
        PRINT 'Dropped spGen__APILog_GetByID'
    END
GO

/* ------------------------------------------------------------
   PROCEDURE:    spGen__APILog_GetByID

   Description:  Selects record(s) from table 'APILog'

   Generated by GenerateDataAndObjectLayer Version 1.0.0.0
   ------------------------------------------------------------ */

CREATE PROCEDURE dbo.spGen__APILog_GetByID
(
    @APILogID uniqueidentifier

)

AS
BEGIN
    SET NOCOUNT ON
    SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

    DECLARE @Err Int

    Select [APILogID],[APIRouteParamID],[APIAccessKeyID],[ResponseSize],[ResponseTime],[ResponseType],[CreateDateTime__Gen],[UpdateDateTime__Gen]
    FROM [APILog]
    WHERE [APILogID] = @APILogID

End
GO

-- Display the status of Proc creation
If @@Error = 0 PRINT 'Procedure Creation: spGen__APILog_GetByID Succeeded'
Else PRINT 'Procedure Creation: spGen__APILog_GetByID Error on Creation'
GO




If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('spGen__APILog_SearchByString') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE spGen__APILog_SearchByString;
        PRINT 'Dropped spGen__APILog_SearchByString'
    END
GO

/* ------------------------------------------------------------
   PROCEDURE:    spGen__APILog_SearchByString

   Description:  Selects a record from table 'APILog'
                 And puts values into parameters

   Generated by GenerateDataAndObjectLayer Version 1.0.0.0
   ------------------------------------------------------------ */

CREATE PROCEDURE dbo.spGen__APILog_SearchByString
(
    @searchParam varchar(4000)
)

AS
BEGIN
    SET NOCOUNT ON
    SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

    DECLARE @Err Int
    DECLARE @strSql varchar(4000)

    SET @strSql = ' Select [APILogID],[APIRouteParamID],[APIAccessKeyID],[ResponseSize],[ResponseTime],[ResponseType],[CreateDateTime__Gen],[UpdateDateTime__Gen]
    FROM [APILog]
    WHERE ' +  @searchParam

    EXEC(@strSql)

    --//We should NOT be using exec above.
    --//If params are NOT known, then be sure to clean sql
    --//If params are known, format like example below

    --IF @prodname IS NOT NULL
    --SELECT @sql = @sql + ' ProductName LIKE @prodname'
    --EXEC sp_executesql @sql, N'@prodname varchar(400)',@prodname

End
GO

-- Display the status of Proc creation
If @@Error = 0 PRINT 'Procedure Creation: spGen__APILog_SearchByString Succeeded'
Else PRINT 'Procedure Creation: spGen__APILog_SearchByString Error on Creation'
GO




If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('spGen__APILog_Delete') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE spGen__APILog_Delete;
        PRINT 'Dropped spGen__APILog_Delete'
    END
GO

/* ------------------------------------------------------------
   PROCEDURE:    spGen__APILog_Delete

   Description:  Deletes a record from table 'APILog'

   Generated by GenerateDataAndObjectLayer Version 1.0.0.0
   ------------------------------------------------------------ */

CREATE PROCEDURE dbo.spGen__APILog_Delete
(
    @APILogID uniqueidentifier

)
AS
SET NOCOUNT ON
SET XACT_ABORT ON

BEGIN
    DECLARE @Err Int


    DELETE FROM [APILog]
    WHERE [APILogID] = @APILogID


End
GO

-- Display the status of Proc creation
If @@Error = 0 PRINT 'Procedure Creation: spGen__APILog_Delete Succeeded'
Else PRINT 'Procedure Creation: spGen__APILog_Delete Error on Creation'
GO




If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('spGen__APILog_Save') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE spGen__APILog_Save;
        PRINT 'Dropped spGen__APILog_Save'
    END
GO

/* ------------------------------------------------------------
   PROCEDURE:    spGen__APILog_Save

   Description:  Updates or Deletes a record In table 'APILog'

   Generated by GenerateDataAndObjectLayer Version 1.0.0.0
   ------------------------------------------------------------ */

CREATE PROCEDURE dbo.spGen__APILog_Save
(
    @ErrText varchar(4000) output,
    @APILogID uniqueidentifier output,
    @APIRouteParamID uniqueidentifier,
    @APIAccessKeyID uniqueidentifier,
    @ResponseSize int,
    @ResponseTime float,
    @ResponseType int
)

AS
SET NOCOUNT ON
SET XACT_ABORT ON

BEGIN

    DECLARE @UniqueRowCount Int
    IF @APILogID = '00000000-0000-0000-0000-000000000000' SET @APILogID = NULL
    IF @APILogID IS NULL
        BEGIN
            SET @UniqueRowCount = 0       -- No unique indexes exist for this table
            IF @UniqueRowCount > 0
                BEGIN
                    SET @ErrText = ''    -- No unique indexes exist for this table
                END
            ELSE
                BEGIN
                    SET @APILogID = NewID()

                    INSERT
                    INTO [APILog]
                    (
                        [APILogID],
                        [APIRouteParamID],
                        [APIAccessKeyID],
                        [ResponseSize],
                        [ResponseTime],
                        [ResponseType],
                        [CreateDateTime__Gen],
                        [UpdateDateTime__Gen]
                    )
                    VALUES
                    (
                        @APILogID,
                        @APIRouteParamID,
                        @APIAccessKeyID,
                        @ResponseSize,
                        @ResponseTime,
                        @ResponseType,
                        SYSDATETIME(),
                        SYSDATETIME()
                    )
                END
        END
    ELSE
        BEGIN
            SET @UniqueRowCount = 0       -- No unique indexes exist for this table
            IF @UniqueRowCount > 0
                BEGIN
                    SET @ErrText = ''    -- No unique indexes exist for this table
                END
            ELSE
                BEGIN
                    UPDATE [APILog]
                    SET
                    [APIRouteParamID] = @APIRouteParamID,
                    [APIAccessKeyID] = @APIAccessKeyID,
                    [ResponseSize] = @ResponseSize,
                    [ResponseTime] = @ResponseTime,
                    [ResponseType] = @ResponseType,
                    [UpdateDateTime__Gen] = SYSDATETIME()
                    WHERE [APILogID] = @APILogID
                END
        END

End
GO

-- Display the status of Proc creation
If @@Error = 0 PRINT 'Procedure Creation: spGen__APILog_Save Succeeded'
Else PRINT 'Procedure Creation: spGen__APILog_Save Error on Creation'
GO




