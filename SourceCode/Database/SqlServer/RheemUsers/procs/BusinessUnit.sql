/*
'===============================================================================
' Generated by GenerateDataAndObjectLayer Version 1.0.0.0
'
' <auto-generated>
'     This code was generated by a tool.
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated. 
' </auto-generated>
'===============================================================================

*/
USE [RheemUsers]

/* ------------------------------------------------------------
   Get rid of obsolete InsertBusinessUnit
   Get rid of obsolete UpdateBusinessUnit
   Get rid of obsolete DeleteBusinessUnit
   Get rid of obsolete SearchBusinessUnitByString
   Get rid of obsolete GetBusinessUnitByID
   ------------------------------------------------------------ */
If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('InsertBusinessUnit') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE InsertBusinessUnit;
        PRINT 'Dropped InsertBusinessUnit'
    END
GO

If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('UpdateBusinessUnit') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE UpdateBusinessUnit;
        PRINT 'Dropped UpdateBusinessUnit'
    END
GO

If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('DeleteBusinessUnit') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE DeleteBusinessUnit;
        PRINT 'Dropped DeleteBusinessUnit'
    END
GO

If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('SearchBusinessUnitByString') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE SearchBusinessUnitByString;
        PRINT 'Dropped SearchBusinessUnitByString'
    END
GO

If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('GetBusinessUnitByID') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE GetBusinessUnitByID;
        PRINT 'Dropped GetBusinessUnitByID'
    END
GO

If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('spGen__BusinessUnit_GetByID') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE spGen__BusinessUnit_GetByID;
        PRINT 'Dropped spGen__BusinessUnit_GetByID'
    END
GO

/* ------------------------------------------------------------
   PROCEDURE:    spGen__BusinessUnit_GetByID

   Description:  Selects record(s) from table 'BusinessUnit'

   Generated by GenerateDataAndObjectLayer Version 1.0.0.0
   ------------------------------------------------------------ */

CREATE PROCEDURE dbo.spGen__BusinessUnit_GetByID
(
    @BusinessUnitID uniqueidentifier

)

AS
BEGIN
    SET NOCOUNT ON
    SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

    DECLARE @Err Int

    Select [BusinessUnitID],[BusinessUnitName],[CreateDateTime__Gen],[UpdateDateTime__Gen]
    FROM [BusinessUnit]
    WHERE [BusinessUnitID] = @BusinessUnitID

End
GO

-- Display the status of Proc creation
If @@Error = 0 PRINT 'Procedure Creation: spGen__BusinessUnit_GetByID Succeeded'
Else PRINT 'Procedure Creation: spGen__BusinessUnit_GetByID Error on Creation'
GO




If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('spGen__BusinessUnit_SearchByString') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE spGen__BusinessUnit_SearchByString;
        PRINT 'Dropped spGen__BusinessUnit_SearchByString'
    END
GO

/* ------------------------------------------------------------
   PROCEDURE:    spGen__BusinessUnit_SearchByString

   Description:  Selects a record from table 'BusinessUnit'
                 And puts values into parameters

   Generated by GenerateDataAndObjectLayer Version 1.0.0.0
   ------------------------------------------------------------ */

CREATE PROCEDURE dbo.spGen__BusinessUnit_SearchByString
(
    @searchParam varchar(4000)
)

AS
BEGIN
    SET NOCOUNT ON
    SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

    DECLARE @Err Int
    DECLARE @strSql varchar(4000)

    SET @strSql = ' Select [BusinessUnitID],[BusinessUnitName],[CreateDateTime__Gen],[UpdateDateTime__Gen]
    FROM [BusinessUnit]
    WHERE ' +  @searchParam

    EXEC(@strSql)

    --//We should NOT be using exec above.
    --//If params are NOT known, then be sure to clean sql
    --//If params are known, format like example below

    --IF @prodname IS NOT NULL
    --SELECT @sql = @sql + ' ProductName LIKE @prodname'
    --EXEC sp_executesql @sql, N'@prodname varchar(400)',@prodname

End
GO

-- Display the status of Proc creation
If @@Error = 0 PRINT 'Procedure Creation: spGen__BusinessUnit_SearchByString Succeeded'
Else PRINT 'Procedure Creation: spGen__BusinessUnit_SearchByString Error on Creation'
GO




If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('spGen__BusinessUnit_Delete') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE spGen__BusinessUnit_Delete;
        PRINT 'Dropped spGen__BusinessUnit_Delete'
    END
GO

/* ------------------------------------------------------------
   PROCEDURE:    spGen__BusinessUnit_Delete

   Description:  Deletes a record from table 'BusinessUnit'

   Generated by GenerateDataAndObjectLayer Version 1.0.0.0
   ------------------------------------------------------------ */

CREATE PROCEDURE dbo.spGen__BusinessUnit_Delete
(
    @BusinessUnitID uniqueidentifier

)
AS
SET NOCOUNT ON
SET XACT_ABORT ON

BEGIN
    DECLARE @Err Int


    DELETE FROM [BusinessUnit]
    WHERE [BusinessUnitID] = @BusinessUnitID


End
GO

-- Display the status of Proc creation
If @@Error = 0 PRINT 'Procedure Creation: spGen__BusinessUnit_Delete Succeeded'
Else PRINT 'Procedure Creation: spGen__BusinessUnit_Delete Error on Creation'
GO




If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('spGen__BusinessUnit_Save') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE spGen__BusinessUnit_Save;
        PRINT 'Dropped spGen__BusinessUnit_Save'
    END
GO

/* ------------------------------------------------------------
   PROCEDURE:    spGen__BusinessUnit_Save

   Description:  Updates or Deletes a record In table 'BusinessUnit'

   Generated by GenerateDataAndObjectLayer Version 1.0.0.0
   ------------------------------------------------------------ */

CREATE PROCEDURE dbo.spGen__BusinessUnit_Save
(
    @ErrText varchar(4000) output,
    @BusinessUnitID uniqueidentifier output,
    @BusinessUnitName varchar(100)
)

AS
SET NOCOUNT ON
SET XACT_ABORT ON

BEGIN

    DECLARE @UniqueRowCount Int
    IF @BusinessUnitID = '00000000-0000-0000-0000-000000000000' SET @BusinessUnitID = NULL
    IF @BusinessUnitID IS NULL
        BEGIN
            SELECT @UniqueRowCount = COUNT(1) FROM [BusinessUnit] where [BusinessUnitName] = @BusinessUnitName 
            IF @UniqueRowCount > 0
                BEGIN
                    SET @ErrText = 'BusinessUnitName ' + Convert(varchar(36), @BusinessUnitName) + ' already exists'
                END
            ELSE
                BEGIN
                    SET @BusinessUnitID = NewID()

                    INSERT
                    INTO [BusinessUnit]
                    (
                        [BusinessUnitID],
                        [BusinessUnitName],
                        [CreateDateTime__Gen],
                        [UpdateDateTime__Gen]
                    )
                    VALUES
                    (
                        @BusinessUnitID,
                        @BusinessUnitName,
                        SYSDATETIME(),
                        SYSDATETIME()
                    )
                END
        END
    ELSE
        BEGIN
            -- check to see that there isn't another row like this one (assuming the unique index column(s) might have changed)
            SELECT @UniqueRowCount = COUNT(1) FROM [BusinessUnit] where [BusinessUnitName] = @BusinessUnitName  and [BusinessUnitID] <> @BusinessUnitID
            IF @UniqueRowCount > 0
                BEGIN
                    SET @ErrText = 'BusinessUnitName ' + Convert(varchar(36), @BusinessUnitName) + ' already exists'
                END
            ELSE
                BEGIN
                    UPDATE [BusinessUnit]
                    SET
                    [BusinessUnitName] = @BusinessUnitName,
                    [UpdateDateTime__Gen] = SYSDATETIME()
                    WHERE [BusinessUnitID] = @BusinessUnitID
                END
        END

End
GO

-- Display the status of Proc creation
If @@Error = 0 PRINT 'Procedure Creation: spGen__BusinessUnit_Save Succeeded'
Else PRINT 'Procedure Creation: spGen__BusinessUnit_Save Error on Creation'
GO




