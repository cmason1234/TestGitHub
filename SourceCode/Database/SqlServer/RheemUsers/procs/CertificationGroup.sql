/*
'===============================================================================
' Generated by GenerateDataAndObjectLayer Version 1.0.0.0
'
' <auto-generated>
'     This code was generated by a tool.
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated. 
' </auto-generated>
'===============================================================================

*/
USE [RheemUsers]

/* ------------------------------------------------------------
   Get rid of obsolete InsertCertificationGroup
   Get rid of obsolete UpdateCertificationGroup
   Get rid of obsolete DeleteCertificationGroup
   Get rid of obsolete SearchCertificationGroupByString
   Get rid of obsolete GetCertificationGroupByID
   ------------------------------------------------------------ */
If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('InsertCertificationGroup') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE InsertCertificationGroup;
        PRINT 'Dropped InsertCertificationGroup'
    END
GO

If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('UpdateCertificationGroup') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE UpdateCertificationGroup;
        PRINT 'Dropped UpdateCertificationGroup'
    END
GO

If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('DeleteCertificationGroup') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE DeleteCertificationGroup;
        PRINT 'Dropped DeleteCertificationGroup'
    END
GO

If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('SearchCertificationGroupByString') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE SearchCertificationGroupByString;
        PRINT 'Dropped SearchCertificationGroupByString'
    END
GO

If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('GetCertificationGroupByID') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE GetCertificationGroupByID;
        PRINT 'Dropped GetCertificationGroupByID'
    END
GO

If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('spGen__CertificationGroup_GetByID') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE spGen__CertificationGroup_GetByID;
        PRINT 'Dropped spGen__CertificationGroup_GetByID'
    END
GO

/* ------------------------------------------------------------
   PROCEDURE:    spGen__CertificationGroup_GetByID

   Description:  Selects record(s) from table 'CertificationGroup'

   Generated by GenerateDataAndObjectLayer Version 1.0.0.0
   ------------------------------------------------------------ */

CREATE PROCEDURE dbo.spGen__CertificationGroup_GetByID
(
    @CertificationGroupID uniqueidentifier

)

AS
BEGIN
    SET NOCOUNT ON
    SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

    DECLARE @Err Int

    Select [CertificationGroupID],[GroupName],[CreateDateTime__Gen],[UpdateDateTime__Gen],[Description],[SortOrder]
    FROM [CertificationGroup]
    WHERE [CertificationGroupID] = @CertificationGroupID

End
GO

-- Display the status of Proc creation
If @@Error = 0 PRINT 'Procedure Creation: spGen__CertificationGroup_GetByID Succeeded'
Else PRINT 'Procedure Creation: spGen__CertificationGroup_GetByID Error on Creation'
GO




If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('spGen__CertificationGroup_SearchByString') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE spGen__CertificationGroup_SearchByString;
        PRINT 'Dropped spGen__CertificationGroup_SearchByString'
    END
GO

/* ------------------------------------------------------------
   PROCEDURE:    spGen__CertificationGroup_SearchByString

   Description:  Selects a record from table 'CertificationGroup'
                 And puts values into parameters

   Generated by GenerateDataAndObjectLayer Version 1.0.0.0
   ------------------------------------------------------------ */

CREATE PROCEDURE dbo.spGen__CertificationGroup_SearchByString
(
    @searchParam varchar(8000)
)

AS
BEGIN
    SET NOCOUNT ON
    SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

    DECLARE @Err Int
    DECLARE @strSql varchar(8000)

    SET @strSql = ' Select [CertificationGroupID],[GroupName],[CreateDateTime__Gen],[UpdateDateTime__Gen],[Description],[SortOrder]
    FROM [CertificationGroup]
    WHERE ' +  @searchParam

    EXEC(@strSql)

    --//We should NOT be using exec above.
    --//If params are NOT known, then be sure to clean sql
    --//If params are known, format like example below

    --IF @prodname IS NOT NULL
    --SELECT @sql = @sql + ' ProductName LIKE @prodname'
    --EXEC sp_executesql @sql, N'@prodname varchar(400)',@prodname

End
GO

-- Display the status of Proc creation
If @@Error = 0 PRINT 'Procedure Creation: spGen__CertificationGroup_SearchByString Succeeded'
Else PRINT 'Procedure Creation: spGen__CertificationGroup_SearchByString Error on Creation'
GO




If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('spGen__CertificationGroup_Delete') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE spGen__CertificationGroup_Delete;
        PRINT 'Dropped spGen__CertificationGroup_Delete'
    END
GO

/* ------------------------------------------------------------
   PROCEDURE:    spGen__CertificationGroup_Delete

   Description:  Deletes a record from table 'CertificationGroup'

   Generated by GenerateDataAndObjectLayer Version 1.0.0.0
   ------------------------------------------------------------ */

CREATE PROCEDURE dbo.spGen__CertificationGroup_Delete
(
    @CertificationGroupID uniqueidentifier

)
AS
SET NOCOUNT ON
SET XACT_ABORT ON

BEGIN
    DECLARE @Err Int


    DELETE FROM [CertificationGroup]
    WHERE [CertificationGroupID] = @CertificationGroupID


End
GO

-- Display the status of Proc creation
If @@Error = 0 PRINT 'Procedure Creation: spGen__CertificationGroup_Delete Succeeded'
Else PRINT 'Procedure Creation: spGen__CertificationGroup_Delete Error on Creation'
GO




If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('spGen__CertificationGroup_Save') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE spGen__CertificationGroup_Save;
        PRINT 'Dropped spGen__CertificationGroup_Save'
    END
GO

/* ------------------------------------------------------------
   PROCEDURE:    spGen__CertificationGroup_Save

   Description:  Updates or Deletes a record In table 'CertificationGroup'

   Generated by GenerateDataAndObjectLayer Version 1.0.0.0
   ------------------------------------------------------------ */

CREATE PROCEDURE dbo.spGen__CertificationGroup_Save
(
    @ErrText varchar(4000) output,
    @CertificationGroupID uniqueidentifier output,
    @GroupName varchar(50),
    @Description text,
    @SortOrder int
)

AS
SET NOCOUNT ON
SET XACT_ABORT ON

BEGIN

    DECLARE @UniqueRowCount Int
    IF @CertificationGroupID = '00000000-0000-0000-0000-000000000000' SET @CertificationGroupID = NULL
    IF @CertificationGroupID IS NULL
        BEGIN
            SELECT @UniqueRowCount = COUNT(1) FROM [CertificationGroup] where [GroupName] = @GroupName 
            IF @UniqueRowCount > 0
                BEGIN
                    SET @ErrText = 'GroupName ' + Convert(varchar(36), @GroupName) + ' already exists'
                END
            ELSE
                BEGIN
                    SET @CertificationGroupID = NewID()

                    INSERT
                    INTO [CertificationGroup]
                    (
                        [CertificationGroupID],
                        [GroupName],
                        [CreateDateTime__Gen],
                        [UpdateDateTime__Gen],
                        [Description],
                        [SortOrder]
                    )
                    VALUES
                    (
                        @CertificationGroupID,
                        @GroupName,
                        SYSDATETIME(),
                        SYSDATETIME(),
                        @Description,
                        @SortOrder
                    )
                END
        END
    ELSE
        BEGIN
            -- check to see that there isn't another row like this one (assuming the unique index column(s) might have changed)
            SELECT @UniqueRowCount = COUNT(1) FROM [CertificationGroup] where [GroupName] = @GroupName  and [CertificationGroupID] <> @CertificationGroupID
            IF @UniqueRowCount > 0
                BEGIN
                    SET @ErrText = 'GroupName ' + Convert(varchar(36), @GroupName) + ' already exists'
                END
            ELSE
                BEGIN
                    UPDATE [CertificationGroup]
                    SET
                    [GroupName] = @GroupName,
                    [UpdateDateTime__Gen] = SYSDATETIME(),
                    [Description] = @Description,
                    [SortOrder] = @SortOrder
                    WHERE [CertificationGroupID] = @CertificationGroupID
                END
        END

End
GO

-- Display the status of Proc creation
If @@Error = 0 PRINT 'Procedure Creation: spGen__CertificationGroup_Save Succeeded'
Else PRINT 'Procedure Creation: spGen__CertificationGroup_Save Error on Creation'
GO




