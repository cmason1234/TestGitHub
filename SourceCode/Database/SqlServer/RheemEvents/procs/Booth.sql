/*
'===============================================================================
' Generated by GenerateDataAndObjectLayer Version 1.0.0.0
'
' <auto-generated>
'     This code was generated by a tool.
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated. 
' </auto-generated>
'===============================================================================

*/
USE [RheemEvents]

/* ------------------------------------------------------------
   Get rid of obsolete InsertBooth
   Get rid of obsolete UpdateBooth
   Get rid of obsolete DeleteBooth
   Get rid of obsolete SearchBoothByString
   Get rid of obsolete GetBoothByID
   ------------------------------------------------------------ */
If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('InsertBooth') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE InsertBooth;
        PRINT 'Dropped InsertBooth'
    END
GO

If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('UpdateBooth') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE UpdateBooth;
        PRINT 'Dropped UpdateBooth'
    END
GO

If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('DeleteBooth') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE DeleteBooth;
        PRINT 'Dropped DeleteBooth'
    END
GO

If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('SearchBoothByString') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE SearchBoothByString;
        PRINT 'Dropped SearchBoothByString'
    END
GO

If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('GetBoothByID') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE GetBoothByID;
        PRINT 'Dropped GetBoothByID'
    END
GO

If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('spGen__Booth_GetByID') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE spGen__Booth_GetByID;
        PRINT 'Dropped spGen__Booth_GetByID'
    END
GO

/* ------------------------------------------------------------
   PROCEDURE:    spGen__Booth_GetByID

   Description:  Selects record(s) from table 'Booth'

   Generated by GenerateDataAndObjectLayer Version 1.0.0.0
   ------------------------------------------------------------ */

CREATE PROCEDURE dbo.spGen__Booth_GetByID
(
    @BoothID uniqueidentifier

)

AS
BEGIN
    SET NOCOUNT ON
    SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

    DECLARE @Err Int

    Select [BoothID],[RheemEventID],[BoothType],[BoothNum],[BoothLocation],[Width],[Length],[MaxCapacity],[HasPower],[HasInternet]
    FROM [Booth]
    WHERE [BoothID] = @BoothID

End
GO

-- Display the status of Proc creation
If @@Error = 0 PRINT 'Procedure Creation: spGen__Booth_GetByID Succeeded'
Else PRINT 'Procedure Creation: spGen__Booth_GetByID Error on Creation'
GO




If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('spGen__Booth_SearchByString') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE spGen__Booth_SearchByString;
        PRINT 'Dropped spGen__Booth_SearchByString'
    END
GO

/* ------------------------------------------------------------
   PROCEDURE:    spGen__Booth_SearchByString

   Description:  Selects a record from table 'Booth'
                 And puts values into parameters

   Generated by GenerateDataAndObjectLayer Version 1.0.0.0
   ------------------------------------------------------------ */

CREATE PROCEDURE dbo.spGen__Booth_SearchByString
(
    @searchParam varchar(4000)
)

AS
BEGIN
    SET NOCOUNT ON
    SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

    DECLARE @Err Int
    DECLARE @strSql varchar(4000)

    SET @strSql = ' Select [BoothID],[RheemEventID],[BoothType],[BoothNum],[BoothLocation],[Width],[Length],[MaxCapacity],[HasPower],[HasInternet]
    FROM [Booth]
    WHERE ' +  @searchParam

    EXEC(@strSql)

    --//We should NOT be using exec above.
    --//If params are NOT known, then be sure to clean sql
    --//If params are known, format like example below

    --IF @prodname IS NOT NULL
    --SELECT @sql = @sql + ' ProductName LIKE @prodname'
    --EXEC sp_executesql @sql, N'@prodname varchar(400)',@prodname

End
GO

-- Display the status of Proc creation
If @@Error = 0 PRINT 'Procedure Creation: spGen__Booth_SearchByString Succeeded'
Else PRINT 'Procedure Creation: spGen__Booth_SearchByString Error on Creation'
GO




If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('spGen__Booth_Delete') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE spGen__Booth_Delete;
        PRINT 'Dropped spGen__Booth_Delete'
    END
GO

/* ------------------------------------------------------------
   PROCEDURE:    spGen__Booth_Delete

   Description:  Deletes a record from table 'Booth'

   Generated by GenerateDataAndObjectLayer Version 1.0.0.0
   ------------------------------------------------------------ */

CREATE PROCEDURE dbo.spGen__Booth_Delete
(
    @BoothID uniqueidentifier

)
AS
SET NOCOUNT ON
SET XACT_ABORT ON

BEGIN
    DECLARE @Err Int


    DELETE FROM [Booth]
    WHERE [BoothID] = @BoothID


End
GO

-- Display the status of Proc creation
If @@Error = 0 PRINT 'Procedure Creation: spGen__Booth_Delete Succeeded'
Else PRINT 'Procedure Creation: spGen__Booth_Delete Error on Creation'
GO




If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('spGen__Booth_Save') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE spGen__Booth_Save;
        PRINT 'Dropped spGen__Booth_Save'
    END
GO

/* ------------------------------------------------------------
   PROCEDURE:    spGen__Booth_Save

   Description:  Updates or Deletes a record In table 'Booth'

   Generated by GenerateDataAndObjectLayer Version 1.0.0.0
   ------------------------------------------------------------ */

CREATE PROCEDURE dbo.spGen__Booth_Save
(
    @ErrText varchar(4000) output,
    @BoothID uniqueidentifier output,
    @RheemEventID uniqueidentifier,
    @BoothType varchar(50),
    @BoothNum nvarchar(50),
    @BoothLocation nvarchar(250),
    @Width int,
    @Length int,
    @MaxCapacity int,
    @HasPower int,
    @HasInternet int
)

AS
SET NOCOUNT ON
SET XACT_ABORT ON

BEGIN

    DECLARE @UniqueRowCount Int
    IF @BoothID = '00000000-0000-0000-0000-000000000000' SET @BoothID = NULL
    IF @BoothID IS NULL
        BEGIN
            SET @UniqueRowCount = 0       -- No unique indexes exist for this table
            IF @UniqueRowCount > 0
                BEGIN
                    SET @ErrText = ''    -- No unique indexes exist for this table
                END
            ELSE
                BEGIN
                    SET @BoothID = NewID()

                    INSERT
                    INTO [Booth]
                    (
                        [BoothID],
                        [RheemEventID],
                        [BoothType],
                        [BoothNum],
                        [BoothLocation],
                        [Width],
                        [Length],
                        [MaxCapacity],
                        [HasPower],
                        [HasInternet]
                    )
                    VALUES
                    (
                        @BoothID,
                        @RheemEventID,
                        @BoothType,
                        @BoothNum,
                        @BoothLocation,
                        @Width,
                        @Length,
                        @MaxCapacity,
                        @HasPower,
                        @HasInternet
                    )
                END
        END
    ELSE
        BEGIN
            SET @UniqueRowCount = 0       -- No unique indexes exist for this table
            IF @UniqueRowCount > 0
                BEGIN
                    SET @ErrText = ''    -- No unique indexes exist for this table
                END
            ELSE
                BEGIN
                    UPDATE [Booth]
                    SET
                    [RheemEventID] = @RheemEventID,
                    [BoothType] = @BoothType,
                    [BoothNum] = @BoothNum,
                    [BoothLocation] = @BoothLocation,
                    [Width] = @Width,
                    [Length] = @Length,
                    [MaxCapacity] = @MaxCapacity,
                    [HasPower] = @HasPower,
                    [HasInternet] = @HasInternet
                    WHERE [BoothID] = @BoothID
                END
        END

End
GO

-- Display the status of Proc creation
If @@Error = 0 PRINT 'Procedure Creation: spGen__Booth_Save Succeeded'
Else PRINT 'Procedure Creation: spGen__Booth_Save Error on Creation'
GO




