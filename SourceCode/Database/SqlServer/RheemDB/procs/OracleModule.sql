/*
'===============================================================================
' Generated by GenerateDataAndObjectLayer Version 1.0.0.0
'
' <auto-generated>
'     This code was generated by a tool.
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated. 
' </auto-generated>
'===============================================================================

*/
USE [RheemDB]

/* ------------------------------------------------------------
   Get rid of obsolete InsertOracleModule
   Get rid of obsolete UpdateOracleModule
   Get rid of obsolete DeleteOracleModule
   Get rid of obsolete SearchOracleModuleByString
   Get rid of obsolete GetOracleModuleByID
   ------------------------------------------------------------ */
If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('InsertOracleModule') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE InsertOracleModule;
        PRINT 'Dropped InsertOracleModule'
    END
GO

If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('UpdateOracleModule') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE UpdateOracleModule;
        PRINT 'Dropped UpdateOracleModule'
    END
GO

If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('DeleteOracleModule') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE DeleteOracleModule;
        PRINT 'Dropped DeleteOracleModule'
    END
GO

If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('SearchOracleModuleByString') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE SearchOracleModuleByString;
        PRINT 'Dropped SearchOracleModuleByString'
    END
GO

If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('GetOracleModuleByID') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE GetOracleModuleByID;
        PRINT 'Dropped GetOracleModuleByID'
    END
GO

If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('spGen__OracleModule_GetByID') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE spGen__OracleModule_GetByID;
        PRINT 'Dropped spGen__OracleModule_GetByID'
    END
GO

/* ------------------------------------------------------------
   PROCEDURE:    spGen__OracleModule_GetByID

   Description:  Selects record(s) from table 'OracleModule'

   Generated by GenerateDataAndObjectLayer Version 1.0.0.0
   ------------------------------------------------------------ */

CREATE PROCEDURE dbo.spGen__OracleModule_GetByID
(
    @OracleModuleID uniqueidentifier

)

AS
BEGIN
    SET NOCOUNT ON
    SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

    DECLARE @Err Int

    Select [OracleModuleID],[ModuleName],[ModuleOrder]
    FROM [OracleModule]
    WHERE [OracleModuleID] = @OracleModuleID

End
GO

-- Display the status of Proc creation
If @@Error = 0 PRINT 'Procedure Creation: spGen__OracleModule_GetByID Succeeded'
Else PRINT 'Procedure Creation: spGen__OracleModule_GetByID Error on Creation'
GO




If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('spGen__OracleModule_SearchByString') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE spGen__OracleModule_SearchByString;
        PRINT 'Dropped spGen__OracleModule_SearchByString'
    END
GO

/* ------------------------------------------------------------
   PROCEDURE:    spGen__OracleModule_SearchByString

   Description:  Selects a record from table 'OracleModule'
                 And puts values into parameters

   Generated by GenerateDataAndObjectLayer Version 1.0.0.0
   ------------------------------------------------------------ */

CREATE PROCEDURE dbo.spGen__OracleModule_SearchByString
(
    @searchParam varchar(4000)
)

AS
BEGIN
    SET NOCOUNT ON
    SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

    DECLARE @Err Int
    DECLARE @strSql varchar(4000)

    SET @strSql = ' Select [OracleModuleID],[ModuleName],[ModuleOrder]
    FROM [OracleModule]
    WHERE ' +  @searchParam

    EXEC(@strSql)

    --//We should NOT be using exec above.
    --//If params are NOT known, then be sure to clean sql
    --//If params are known, format like example below

    --IF @prodname IS NOT NULL
    --SELECT @sql = @sql + ' ProductName LIKE @prodname'
    --EXEC sp_executesql @sql, N'@prodname varchar(400)',@prodname

End
GO

-- Display the status of Proc creation
If @@Error = 0 PRINT 'Procedure Creation: spGen__OracleModule_SearchByString Succeeded'
Else PRINT 'Procedure Creation: spGen__OracleModule_SearchByString Error on Creation'
GO




If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('spGen__OracleModule_Delete') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE spGen__OracleModule_Delete;
        PRINT 'Dropped spGen__OracleModule_Delete'
    END
GO

/* ------------------------------------------------------------
   PROCEDURE:    spGen__OracleModule_Delete

   Description:  Deletes a record from table 'OracleModule'

   Generated by GenerateDataAndObjectLayer Version 1.0.0.0
   ------------------------------------------------------------ */

CREATE PROCEDURE dbo.spGen__OracleModule_Delete
(
    @OracleModuleID uniqueidentifier

)
AS
SET NOCOUNT ON
SET XACT_ABORT ON

BEGIN
    DECLARE @Err Int


    DELETE FROM [OracleModule]
    WHERE [OracleModuleID] = @OracleModuleID


End
GO

-- Display the status of Proc creation
If @@Error = 0 PRINT 'Procedure Creation: spGen__OracleModule_Delete Succeeded'
Else PRINT 'Procedure Creation: spGen__OracleModule_Delete Error on Creation'
GO




If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('spGen__OracleModule_Save') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE spGen__OracleModule_Save;
        PRINT 'Dropped spGen__OracleModule_Save'
    END
GO

/* ------------------------------------------------------------
   PROCEDURE:    spGen__OracleModule_Save

   Description:  Updates or Deletes a record In table 'OracleModule'

   Generated by GenerateDataAndObjectLayer Version 1.0.0.0
   ------------------------------------------------------------ */

CREATE PROCEDURE dbo.spGen__OracleModule_Save
(
    @ErrText varchar(4000) output,
    @OracleModuleID uniqueidentifier output,
    @ModuleName varchar(50),
    @ModuleOrder int
)

AS
SET NOCOUNT ON
SET XACT_ABORT ON

BEGIN

    DECLARE @UniqueRowCount Int
    IF @OracleModuleID = '00000000-0000-0000-0000-000000000000' SET @OracleModuleID = NULL
    IF @OracleModuleID IS NULL
        BEGIN
            SET @UniqueRowCount = 0       -- No unique indexes exist for this table
            IF @UniqueRowCount > 0
                BEGIN
                    SET @ErrText = ''    -- No unique indexes exist for this table
                END
            ELSE
                BEGIN
                    SET @OracleModuleID = NewID()

                    INSERT
                    INTO [OracleModule]
                    (
                        [OracleModuleID],
                        [ModuleName],
                        [ModuleOrder]
                    )
                    VALUES
                    (
                        @OracleModuleID,
                        @ModuleName,
                        @ModuleOrder
                    )
                END
        END
    ELSE
        BEGIN
            SET @UniqueRowCount = 0       -- No unique indexes exist for this table
            IF @UniqueRowCount > 0
                BEGIN
                    SET @ErrText = ''    -- No unique indexes exist for this table
                END
            ELSE
                BEGIN
                    UPDATE [OracleModule]
                    SET
                    [ModuleName] = @ModuleName,
                    [ModuleOrder] = @ModuleOrder
                    WHERE [OracleModuleID] = @OracleModuleID
                END
        END

End
GO

-- Display the status of Proc creation
If @@Error = 0 PRINT 'Procedure Creation: spGen__OracleModule_Save Succeeded'
Else PRINT 'Procedure Creation: spGen__OracleModule_Save Error on Creation'
GO




