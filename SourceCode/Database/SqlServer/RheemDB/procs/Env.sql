/*
'===============================================================================
' Generated by GenerateDataAndObjectLayer Version 1.0.0.0
'
' <auto-generated>
'     This code was generated by a tool.
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated. 
' </auto-generated>
'===============================================================================

*/
USE [RheemDB]

/* ------------------------------------------------------------
   Get rid of obsolete InsertEnv
   Get rid of obsolete UpdateEnv
   Get rid of obsolete DeleteEnv
   Get rid of obsolete SearchEnvByString
   Get rid of obsolete GetEnvByID
   ------------------------------------------------------------ */
If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('InsertEnv') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE InsertEnv;
        PRINT 'Dropped InsertEnv'
    END
GO

If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('UpdateEnv') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE UpdateEnv;
        PRINT 'Dropped UpdateEnv'
    END
GO

If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('DeleteEnv') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE DeleteEnv;
        PRINT 'Dropped DeleteEnv'
    END
GO

If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('SearchEnvByString') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE SearchEnvByString;
        PRINT 'Dropped SearchEnvByString'
    END
GO

If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('GetEnvByID') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE GetEnvByID;
        PRINT 'Dropped GetEnvByID'
    END
GO

If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('spGen__Env_GetByID') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE spGen__Env_GetByID;
        PRINT 'Dropped spGen__Env_GetByID'
    END
GO

/* ------------------------------------------------------------
   PROCEDURE:    spGen__Env_GetByID

   Description:  Selects record(s) from table 'Env'

   Generated by GenerateDataAndObjectLayer Version 1.0.0.0
   ------------------------------------------------------------ */

CREATE PROCEDURE dbo.spGen__Env_GetByID
(
    @EnvID uniqueidentifier

)

AS
BEGIN
    SET NOCOUNT ON
    SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

    DECLARE @Err Int

    Select [EnvID],[EnvName],[EnvValue],[TimeStamp]
    FROM [Env]
    WHERE [EnvID] = @EnvID

End
GO

-- Display the status of Proc creation
If @@Error = 0 PRINT 'Procedure Creation: spGen__Env_GetByID Succeeded'
Else PRINT 'Procedure Creation: spGen__Env_GetByID Error on Creation'
GO




If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('spGen__Env_SearchByString') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE spGen__Env_SearchByString;
        PRINT 'Dropped spGen__Env_SearchByString'
    END
GO

/* ------------------------------------------------------------
   PROCEDURE:    spGen__Env_SearchByString

   Description:  Selects a record from table 'Env'
                 And puts values into parameters

   Generated by GenerateDataAndObjectLayer Version 1.0.0.0
   ------------------------------------------------------------ */

CREATE PROCEDURE dbo.spGen__Env_SearchByString
(
    @searchParam varchar(4000)
)

AS
BEGIN
    SET NOCOUNT ON
    SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

    DECLARE @Err Int
    DECLARE @strSql varchar(4000)

    SET @strSql = ' Select [EnvID],[EnvName],[EnvValue],[TimeStamp]
    FROM [Env]
    WHERE ' +  @searchParam

    EXEC(@strSql)

    --//We should NOT be using exec above.
    --//If params are NOT known, then be sure to clean sql
    --//If params are known, format like example below

    --IF @prodname IS NOT NULL
    --SELECT @sql = @sql + ' ProductName LIKE @prodname'
    --EXEC sp_executesql @sql, N'@prodname varchar(400)',@prodname

End
GO

-- Display the status of Proc creation
If @@Error = 0 PRINT 'Procedure Creation: spGen__Env_SearchByString Succeeded'
Else PRINT 'Procedure Creation: spGen__Env_SearchByString Error on Creation'
GO




If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('spGen__Env_Delete') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE spGen__Env_Delete;
        PRINT 'Dropped spGen__Env_Delete'
    END
GO

/* ------------------------------------------------------------
   PROCEDURE:    spGen__Env_Delete

   Description:  Deletes a record from table 'Env'

   Generated by GenerateDataAndObjectLayer Version 1.0.0.0
   ------------------------------------------------------------ */

CREATE PROCEDURE dbo.spGen__Env_Delete
(
    @EnvID uniqueidentifier

)
AS
SET NOCOUNT ON
SET XACT_ABORT ON

BEGIN
    DECLARE @Err Int


    DELETE FROM [Env]
    WHERE [EnvID] = @EnvID


End
GO

-- Display the status of Proc creation
If @@Error = 0 PRINT 'Procedure Creation: spGen__Env_Delete Succeeded'
Else PRINT 'Procedure Creation: spGen__Env_Delete Error on Creation'
GO




If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('spGen__Env_Save') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE spGen__Env_Save;
        PRINT 'Dropped spGen__Env_Save'
    END
GO

/* ------------------------------------------------------------
   PROCEDURE:    spGen__Env_Save

   Description:  Updates or Deletes a record In table 'Env'

   Generated by GenerateDataAndObjectLayer Version 1.0.0.0
   ------------------------------------------------------------ */

CREATE PROCEDURE dbo.spGen__Env_Save
(
    @ErrText varchar(4000) output,
    @EnvID uniqueidentifier output,
    @EnvName varchar(50),
    @EnvValue text,
    @TimeStamp datetime
)

AS
SET NOCOUNT ON
SET XACT_ABORT ON

BEGIN

    DECLARE @UniqueRowCount Int
    IF @EnvID = '00000000-0000-0000-0000-000000000000' SET @EnvID = NULL
    IF @EnvID IS NULL
        BEGIN
            SELECT @UniqueRowCount = COUNT(1) FROM [Env] where [EnvName] = @EnvName 
            IF @UniqueRowCount > 0
                BEGIN
                    SET @ErrText = 'EnvName ' + Convert(varchar(36), @EnvName) + ' already exists'
                END
            ELSE
                BEGIN
                    SET @EnvID = NewID()

                    INSERT
                    INTO [Env]
                    (
                        [EnvID],
                        [EnvName],
                        [EnvValue],
                        [TimeStamp]
                    )
                    VALUES
                    (
                        @EnvID,
                        @EnvName,
                        @EnvValue,
                        @TimeStamp
                    )
                END
        END
    ELSE
        BEGIN
            -- check to see that there isn't another row like this one (assuming the unique index column(s) might have changed)
            SELECT @UniqueRowCount = COUNT(1) FROM [Env] where [EnvName] = @EnvName  and [EnvID] <> @EnvID
            IF @UniqueRowCount > 0
                BEGIN
                    SET @ErrText = 'EnvName ' + Convert(varchar(36), @EnvName) + ' already exists'
                END
            ELSE
                BEGIN
                    UPDATE [Env]
                    SET
                    [EnvName] = @EnvName,
                    [EnvValue] = @EnvValue,
                    [TimeStamp] = @TimeStamp
                    WHERE [EnvID] = @EnvID
                END
        END

End
GO

-- Display the status of Proc creation
If @@Error = 0 PRINT 'Procedure Creation: spGen__Env_Save Succeeded'
Else PRINT 'Procedure Creation: spGen__Env_Save Error on Creation'
GO




