/*
'===============================================================================
' Generated by GenerateDataAndObjectLayer Version 1.0.0.0
'
' <auto-generated>
'     This code was generated by a tool.
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated. 
' </auto-generated>
'===============================================================================

*/
USE [Products]

/* ------------------------------------------------------------
   Get rid of obsolete InsertSeries
   Get rid of obsolete UpdateSeries
   Get rid of obsolete DeleteSeries
   Get rid of obsolete SearchSeriesByString
   Get rid of obsolete GetSeriesByID
   ------------------------------------------------------------ */
If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('InsertSeries') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE InsertSeries;
        PRINT 'Dropped InsertSeries'
    END
GO

If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('UpdateSeries') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE UpdateSeries;
        PRINT 'Dropped UpdateSeries'
    END
GO

If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('DeleteSeries') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE DeleteSeries;
        PRINT 'Dropped DeleteSeries'
    END
GO

If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('SearchSeriesByString') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE SearchSeriesByString;
        PRINT 'Dropped SearchSeriesByString'
    END
GO

If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('GetSeriesByID') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE GetSeriesByID;
        PRINT 'Dropped GetSeriesByID'
    END
GO

If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('spGen__Series_GetByID') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE spGen__Series_GetByID;
        PRINT 'Dropped spGen__Series_GetByID'
    END
GO

/* ------------------------------------------------------------
   PROCEDURE:    spGen__Series_GetByID

   Description:  Selects record(s) from table 'Series'

   Generated by GenerateDataAndObjectLayer Version 1.0.0.0
   ------------------------------------------------------------ */

CREATE PROCEDURE dbo.spGen__Series_GetByID
(
    @SeriesID uniqueidentifier

)

AS
BEGIN
    SET NOCOUNT ON
    SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

    DECLARE @Err Int

    Select [SeriesID],[SeriesName],[DivisionID],[Description],[CreateDateTime__Gen],[UpdateDateTime__Gen]
    FROM [Series]
    WHERE [SeriesID] = @SeriesID

End
GO

-- Display the status of Proc creation
If @@Error = 0 PRINT 'Procedure Creation: spGen__Series_GetByID Succeeded'
Else PRINT 'Procedure Creation: spGen__Series_GetByID Error on Creation'
GO




If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('spGen__Series_SearchByString') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE spGen__Series_SearchByString;
        PRINT 'Dropped spGen__Series_SearchByString'
    END
GO

/* ------------------------------------------------------------
   PROCEDURE:    spGen__Series_SearchByString

   Description:  Selects a record from table 'Series'
                 And puts values into parameters

   Generated by GenerateDataAndObjectLayer Version 1.0.0.0
   ------------------------------------------------------------ */

CREATE PROCEDURE dbo.spGen__Series_SearchByString
(
    @searchParam varchar(4000)
)

AS
BEGIN
    SET NOCOUNT ON
    SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

    DECLARE @Err Int
    DECLARE @strSql varchar(4000)

    SET @strSql = ' Select [SeriesID],[SeriesName],[DivisionID],[Description],[CreateDateTime__Gen],[UpdateDateTime__Gen]
    FROM [Series]
    WHERE ' +  @searchParam

    EXEC(@strSql)

    --//We should NOT be using exec above.
    --//If params are NOT known, then be sure to clean sql
    --//If params are known, format like example below

    --IF @prodname IS NOT NULL
    --SELECT @sql = @sql + ' ProductName LIKE @prodname'
    --EXEC sp_executesql @sql, N'@prodname varchar(400)',@prodname

End
GO

-- Display the status of Proc creation
If @@Error = 0 PRINT 'Procedure Creation: spGen__Series_SearchByString Succeeded'
Else PRINT 'Procedure Creation: spGen__Series_SearchByString Error on Creation'
GO




If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('spGen__Series_Delete') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE spGen__Series_Delete;
        PRINT 'Dropped spGen__Series_Delete'
    END
GO

/* ------------------------------------------------------------
   PROCEDURE:    spGen__Series_Delete

   Description:  Deletes a record from table 'Series'

   Generated by GenerateDataAndObjectLayer Version 1.0.0.0
   ------------------------------------------------------------ */

CREATE PROCEDURE dbo.spGen__Series_Delete
(
    @SeriesID uniqueidentifier

)
AS
SET NOCOUNT ON
SET XACT_ABORT ON

BEGIN
    DECLARE @Err Int


    DELETE FROM [Series]
    WHERE [SeriesID] = @SeriesID


End
GO

-- Display the status of Proc creation
If @@Error = 0 PRINT 'Procedure Creation: spGen__Series_Delete Succeeded'
Else PRINT 'Procedure Creation: spGen__Series_Delete Error on Creation'
GO




If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('spGen__Series_Save') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE spGen__Series_Save;
        PRINT 'Dropped spGen__Series_Save'
    END
GO

/* ------------------------------------------------------------
   PROCEDURE:    spGen__Series_Save

   Description:  Updates or Deletes a record In table 'Series'

   Generated by GenerateDataAndObjectLayer Version 1.0.0.0
   ------------------------------------------------------------ */

CREATE PROCEDURE dbo.spGen__Series_Save
(
    @ErrText varchar(4000) output,
    @SeriesID uniqueidentifier output,
    @SeriesName varchar(50),
    @DivisionID uniqueidentifier,
    @Description varchar(256)
)

AS
SET NOCOUNT ON
SET XACT_ABORT ON

BEGIN

    DECLARE @UniqueRowCount Int
    IF @SeriesID = '00000000-0000-0000-0000-000000000000' SET @SeriesID = NULL
    IF @SeriesID IS NULL
        BEGIN
            SET @UniqueRowCount = 0       -- No unique indexes exist for this table
            IF @UniqueRowCount > 0
                BEGIN
                    SET @ErrText = ''    -- No unique indexes exist for this table
                END
            ELSE
                BEGIN
                    SET @SeriesID = NewID()

                    INSERT
                    INTO [Series]
                    (
                        [SeriesID],
                        [SeriesName],
                        [DivisionID],
                        [Description],
                        [CreateDateTime__Gen],
                        [UpdateDateTime__Gen]
                    )
                    VALUES
                    (
                        @SeriesID,
                        @SeriesName,
                        @DivisionID,
                        @Description,
                        SYSDATETIME(),
                        SYSDATETIME()
                    )
                END
        END
    ELSE
        BEGIN
            SET @UniqueRowCount = 0       -- No unique indexes exist for this table
            IF @UniqueRowCount > 0
                BEGIN
                    SET @ErrText = ''    -- No unique indexes exist for this table
                END
            ELSE
                BEGIN
                    UPDATE [Series]
                    SET
                    [SeriesName] = @SeriesName,
                    [DivisionID] = @DivisionID,
                    [Description] = @Description,
                    [UpdateDateTime__Gen] = SYSDATETIME()
                    WHERE [SeriesID] = @SeriesID
                END
        END

End
GO

-- Display the status of Proc creation
If @@Error = 0 PRINT 'Procedure Creation: spGen__Series_Save Succeeded'
Else PRINT 'Procedure Creation: spGen__Series_Save Error on Creation'
GO




