/*
'===============================================================================
' Generated by GenerateDataAndObjectLayer Version 1.0.0.0
'
' <auto-generated>
'     This code was generated by a tool.
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated. 
' </auto-generated>
'===============================================================================

*/
USE [Warranty]

/* ------------------------------------------------------------
   Get rid of obsolete InsertUnits
   Get rid of obsolete UpdateUnits
   Get rid of obsolete DeleteUnits
   Get rid of obsolete SearchUnitsByString
   Get rid of obsolete GetUnitsByID
   ------------------------------------------------------------ */
If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('InsertUnits') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE InsertUnits;
        PRINT 'Dropped InsertUnits'
    END
GO

If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('UpdateUnits') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE UpdateUnits;
        PRINT 'Dropped UpdateUnits'
    END
GO

If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('DeleteUnits') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE DeleteUnits;
        PRINT 'Dropped DeleteUnits'
    END
GO

If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('SearchUnitsByString') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE SearchUnitsByString;
        PRINT 'Dropped SearchUnitsByString'
    END
GO

If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('GetUnitsByID') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE GetUnitsByID;
        PRINT 'Dropped GetUnitsByID'
    END
GO

If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('spGen__Units_GetByID') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE spGen__Units_GetByID;
        PRINT 'Dropped spGen__Units_GetByID'
    END
GO

/* ------------------------------------------------------------
   PROCEDURE:    spGen__Units_GetByID

   Description:  Selects record(s) from table 'Units'

   Generated by GenerateDataAndObjectLayer Version 1.0.0.0
   ------------------------------------------------------------ */

CREATE PROCEDURE dbo.spGen__Units_GetByID
(
    @UnitID uniqueidentifier

)

AS
BEGIN
    SET NOCOUNT ON
    SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

    DECLARE @Err Int

    Select [UnitID],[HomeOwnerID],[UnitBrand],[UnitModel],[UnitType],[UnitSerial],[RegistrationDate],[InstallDate],[TempID],[ReplacementUnitID],[RegistrationSite],[InstanceID],[WarrantyType],[PPKSerialNum]
    FROM [Units]
    WHERE [UnitID] = @UnitID

End
GO

-- Display the status of Proc creation
If @@Error = 0 PRINT 'Procedure Creation: spGen__Units_GetByID Succeeded'
Else PRINT 'Procedure Creation: spGen__Units_GetByID Error on Creation'
GO




If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('spGen__Units_SearchByString') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE spGen__Units_SearchByString;
        PRINT 'Dropped spGen__Units_SearchByString'
    END
GO

/* ------------------------------------------------------------
   PROCEDURE:    spGen__Units_SearchByString

   Description:  Selects a record from table 'Units'
                 And puts values into parameters

   Generated by GenerateDataAndObjectLayer Version 1.0.0.0
   ------------------------------------------------------------ */

CREATE PROCEDURE dbo.spGen__Units_SearchByString
(
    @searchParam varchar(8000)
)

AS
BEGIN
    SET NOCOUNT ON
    SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

    DECLARE @Err Int
    DECLARE @strSql varchar(8000)

    SET @strSql = ' Select [UnitID],[HomeOwnerID],[UnitBrand],[UnitModel],[UnitType],[UnitSerial],[RegistrationDate],[InstallDate],[TempID],[ReplacementUnitID],[RegistrationSite],[InstanceID],[WarrantyType],[PPKSerialNum]
    FROM [Units]
    WHERE ' +  @searchParam

    EXEC(@strSql)

    --//We should NOT be using exec above.
    --//If params are NOT known, then be sure to clean sql
    --//If params are known, format like example below

    --IF @prodname IS NOT NULL
    --SELECT @sql = @sql + ' ProductName LIKE @prodname'
    --EXEC sp_executesql @sql, N'@prodname varchar(400)',@prodname

End
GO

-- Display the status of Proc creation
If @@Error = 0 PRINT 'Procedure Creation: spGen__Units_SearchByString Succeeded'
Else PRINT 'Procedure Creation: spGen__Units_SearchByString Error on Creation'
GO




If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('spGen__Units_Delete') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE spGen__Units_Delete;
        PRINT 'Dropped spGen__Units_Delete'
    END
GO

/* ------------------------------------------------------------
   PROCEDURE:    spGen__Units_Delete

   Description:  Deletes a record from table 'Units'

   Generated by GenerateDataAndObjectLayer Version 1.0.0.0
   ------------------------------------------------------------ */

CREATE PROCEDURE dbo.spGen__Units_Delete
(
    @UnitID uniqueidentifier

)
AS
SET NOCOUNT ON
SET XACT_ABORT ON

BEGIN
    DECLARE @Err Int


    DELETE FROM [Units]
    WHERE [UnitID] = @UnitID


End
GO

-- Display the status of Proc creation
If @@Error = 0 PRINT 'Procedure Creation: spGen__Units_Delete Succeeded'
Else PRINT 'Procedure Creation: spGen__Units_Delete Error on Creation'
GO




If EXISTS (Select * FROM SYSOBJECTS WHERE ID = OBJECT_ID('spGen__Units_Save') AND OBJECTPROPERTY(ID, 'IsProcedure') = 1)
    BEGIN
        DROP PROCEDURE spGen__Units_Save;
        PRINT 'Dropped spGen__Units_Save'
    END
GO

/* ------------------------------------------------------------
   PROCEDURE:    spGen__Units_Save

   Description:  Updates or Deletes a record In table 'Units'

   Generated by GenerateDataAndObjectLayer Version 1.0.0.0
   ------------------------------------------------------------ */

CREATE PROCEDURE dbo.spGen__Units_Save
(
    @ErrText varchar(4000) output,
    @UnitID uniqueidentifier output,
    @HomeOwnerID uniqueidentifier,
    @UnitBrand uniqueidentifier,
    @UnitModel nvarchar(256),
    @UnitType nvarchar(256),
    @UnitSerial nvarchar(50),
    @RegistrationDate datetime,
    @InstallDate text,
    @TempID int,
    @ReplacementUnitID uniqueidentifier,
    @RegistrationSite nvarchar(256),
    @InstanceID varchar(50),
    @WarrantyType varchar(1),
    @PPKSerialNum varchar(50)
)

AS
SET NOCOUNT ON
SET XACT_ABORT ON

BEGIN

    DECLARE @UniqueRowCount Int
    IF @UnitID = '00000000-0000-0000-0000-000000000000' SET @UnitID = NULL
    IF @UnitID IS NULL
        BEGIN
            SET @UniqueRowCount = 0       -- No unique indexes exist for this table
            IF @UniqueRowCount > 0
                BEGIN
                    SET @ErrText = ''    -- No unique indexes exist for this table
                END
            ELSE
                BEGIN
                    SET @UnitID = NewID()

                    INSERT
                    INTO [Units]
                    (
                        [UnitID],
                        [HomeOwnerID],
                        [UnitBrand],
                        [UnitModel],
                        [UnitType],
                        [UnitSerial],
                        [RegistrationDate],
                        [InstallDate],
                        [TempID],
                        [ReplacementUnitID],
                        [RegistrationSite],
                        [InstanceID],
                        [WarrantyType],
                        [PPKSerialNum]
                    )
                    VALUES
                    (
                        @UnitID,
                        @HomeOwnerID,
                        @UnitBrand,
                        @UnitModel,
                        @UnitType,
                        @UnitSerial,
                        @RegistrationDate,
                        @InstallDate,
                        @TempID,
                        @ReplacementUnitID,
                        @RegistrationSite,
                        @InstanceID,
                        @WarrantyType,
                        @PPKSerialNum
                    )
                END
        END
    ELSE
        BEGIN
            SET @UniqueRowCount = 0       -- No unique indexes exist for this table
            IF @UniqueRowCount > 0
                BEGIN
                    SET @ErrText = ''    -- No unique indexes exist for this table
                END
            ELSE
                BEGIN
                    UPDATE [Units]
                    SET
                    [HomeOwnerID] = @HomeOwnerID,
                    [UnitBrand] = @UnitBrand,
                    [UnitModel] = @UnitModel,
                    [UnitType] = @UnitType,
                    [UnitSerial] = @UnitSerial,
                    [RegistrationDate] = @RegistrationDate,
                    [InstallDate] = @InstallDate,
                    [TempID] = @TempID,
                    [ReplacementUnitID] = @ReplacementUnitID,
                    [RegistrationSite] = @RegistrationSite,
                    [InstanceID] = @InstanceID,
                    [WarrantyType] = @WarrantyType,
                    [PPKSerialNum] = @PPKSerialNum
                    WHERE [UnitID] = @UnitID
                END
        END

End
GO

-- Display the status of Proc creation
If @@Error = 0 PRINT 'Procedure Creation: spGen__Units_Save Succeeded'
Else PRINT 'Procedure Creation: spGen__Units_Save Error on Creation'
GO




